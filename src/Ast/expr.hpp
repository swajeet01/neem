/*******************************
*	File generated by ast_generator.py, DO NOT MODIFY!
*******************************/

#ifndef EXPR_HPP
#define EXPR_HPP

#include <memory>
#include <vector>

#include "Token/token.hpp"
#include "Variant/literal.hpp"
#include "Visitor/mutable_state_visitor.hpp"

struct Expr {
	virtual void accept(Mutable_state_visitor&) = 0;
	virtual ~Expr() = default;
};

struct Assign: public Expr {
	Token name;
	std::shared_ptr<Expr> value;
	explicit Assign(Token, std::shared_ptr<Expr>);
	void accept(Mutable_state_visitor&) override;
};

struct Binary: public Expr {
	std::shared_ptr<Expr> left;
	Token op;
	std::shared_ptr<Expr> right;
	explicit Binary(std::shared_ptr<Expr>, Token, std::shared_ptr<Expr>);
	void accept(Mutable_state_visitor&) override;
};

struct Call: public Expr {
	std::shared_ptr<Expr> callee;
	Token paren;
	std::vector<std::shared_ptr<Expr>> arguments;
	explicit Call(std::shared_ptr<Expr>, Token, std::vector<std::shared_ptr<Expr>>);
	void accept(Mutable_state_visitor&) override;
};

struct Grouping: public Expr {
	std::shared_ptr<Expr> expr;
	explicit Grouping(std::shared_ptr<Expr>);
	void accept(Mutable_state_visitor&) override;
};

struct Unary: public Expr {
	Token op;
	std::shared_ptr<Expr> right;
	explicit Unary(Token, std::shared_ptr<Expr>);
	void accept(Mutable_state_visitor&) override;
};

struct Ast_literal: public Expr {
	Literal value;
	explicit Ast_literal(Literal);
	void accept(Mutable_state_visitor&) override;
};

struct Logical: public Expr {
	std::shared_ptr<Expr> left;
	Token op;
	std::shared_ptr<Expr> right;
	explicit Logical(std::shared_ptr<Expr>, Token, std::shared_ptr<Expr>);
	void accept(Mutable_state_visitor&) override;
};

struct Variable: public Expr {
	Token name;
	explicit Variable(Token);
	void accept(Mutable_state_visitor&) override;
};


#endif
